package cn.mastercom.bigdata.evt.locall.struct;

import cn.mastercom.bigdata.mroxdrmerge.CompileMark;
import cn.mastercom.bigdata.mroxdrmerge.MainModel;
import cn.mastercom.bigdata.util.IWriteLogCallBack;
import cn.mastercom.bigdata.util.LOGHelper;

import java.io.Serializable;

public class Stat_Event_Cell implements Serializable
{
    public int iCityID;
    public long iECI;
    public int iInterface;
    public int kpiSet;
    public int iTime;
    protected int rsrp;
    protected String mobileType="";
    protected String imei = "";
	public double fvalue[] = new double[20];
	public static final String spliter = "\t";
    
	public static Stat_Event_Cell fillData(String[] vals, int pos){
		Stat_Event_Cell cell = new Stat_Event_Cell();
		try{
			cell.iCityID = Integer.parseInt(vals[pos++]);
			cell.iECI = Long.parseLong(vals[pos++]);
			cell.iInterface = Integer.parseInt(vals[pos++]);
			cell.kpiSet = Integer.parseInt(vals[pos++]);
			cell.iTime = Integer.parseInt(vals[pos++]);

			if(MainModel.GetInstance().getCompile().Assert(CompileMark.ShanXiJin)){
               cell.rsrp = Integer.parseInt(vals[pos++]);
               cell.mobileType = vals[pos++];
               cell.imei = vals[pos++];
			}

			for (int i = 0; i < cell.fvalue.length; i++)
			{
				cell.fvalue[i] = Double.parseDouble(vals[pos++]);
			}
		}catch(Exception e){
            LOGHelper.GetLogger().writeLog(IWriteLogCallBack.LogType.error, "Stat_Event_Cell.fillData.error"+e
                    .getMessage(), e);
		}
		return cell;
	}
	
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(iCityID);
		sb.append(spliter);
		sb.append(iECI);
		sb.append(spliter);
		sb.append(iInterface);
		sb.append(spliter);
		sb.append(kpiSet);
		sb.append(spliter);
		sb.append(iTime);
        sb.append(spliter);
        if(MainModel.GetInstance().getCompile().Assert(CompileMark.ShanXiJin)){
            sb.append(rsrp).append(spliter);
            sb.append(mobileType).append(spliter);
            sb.append(imei).append(spliter);
        }
		for (int i = 0; i < fvalue.length; i++)
		{
			sb.append(fvalue[i]);
			if(i!=fvalue.length-1){
				sb.append(spliter);
			}
		}	
		return sb.toString();
	}

}

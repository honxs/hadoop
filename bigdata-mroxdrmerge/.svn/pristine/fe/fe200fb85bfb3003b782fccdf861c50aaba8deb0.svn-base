package cn.mastercom.bigdata.spark.mroxdrmerge.xdrloc;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import cn.mastercom.bigdata.util.DataAdapterReader;
import cn.mastercom.bigdata.util.LOGHelper;
import cn.mastercom.bigdata.util.ResultOutputer;
import cn.mastercom.bigdata.util.DataAdapterConf.ParseItem;
import cn.mastercom.bigdata.util.IWriteLogCallBack.LogType;
import cn.mastercom.bigdata.util.hadoop.mapred.MultiOutputMngV2;
import cn.mastercom.bigdata.util.spark.MapByTypeFuncBaseV2;
import cn.mastercom.bigdata.util.spark.TypeInfo;
import cn.mastercom.bigdata.mro.stat.tableEnum.XdrLocTablesEnum;
import cn.mastercom.bigdata.mroxdrmerge.CompileMark;
import cn.mastercom.bigdata.mroxdrmerge.MainModel;
import cn.mastercom.bigdata.stat.userResident.enmus.ResidentLocTablesEnum;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import cn.mastercom.bigdata.conf.cellconfig.CellConfig;
import scala.Tuple2;
import scala.Tuple4;
import cn.mastercom.bigdata.xdr.loc.XdrLocDeal;

public class MapByTypeFunc_XdrLoc2 extends MapByTypeFuncBaseV2 implements org.apache.spark.api.java.function.PairFlatMapFunction<Iterator<Tuple2<Long,Tuple4<Iterable<String>,Iterable<String>,Iterable<String>,Iterable<String>>>>,TypeInfo, Iterable<String>>
{
	
	
	private static final long serialVersionUID = 1L;
	
	//数据集合下标位置
	public static final int DataMark_Location = 0;
	public static final int DataMark_XdrLocSpan = 1;
	public static final int DataMark_MME = 2;
	public static final int DataMark_HTTP = 3;
	
	public ResultOutputer resultOutputer;
	public XdrLocDeal xdrLocDeal;
	public boolean iOnce = true;
	private final static int TimeSpan = 600;// 10分钟间隔
	ParseItem mmeParseItem;
	ParseItem httpParseItem;
	private DataAdapterReader mmeAdapterReader;
	private DataAdapterReader httpAdapterReader;
	int mmeSplitMax = -1;
	int httpSplitMax = -1;
	
	private HashMap<Integer, List<List<String>>> allDataMap; //顺序location xdrlocspan mme http 
	
	public MapByTypeFunc_XdrLoc2(Object[] args) throws Exception
	{
	    super(args);	  
	    registerTableInfo();
	}
	
	public void registerTableInfo()
    {
		{			
			TypeInfo typeInfo = new TypeInfo(ResidentLocTablesEnum.xdrcellhourTime.getIndex(), ResidentLocTablesEnum.xdrcellhourTime.getFileName(), ResidentLocTablesEnum.xdrcellhourTime.getHourPath(mroXdrMergePath, dateStr, hourStr));
			registTypeInfo(typeInfo);
		}
		if (MainModel.GetInstance().getCompile().Assert(CompileMark.NoCsTable)) 
		{
			TypeInfo typeInfo = new TypeInfo(XdrLocTablesEnum.xdrLocation.getIndex(), XdrLocTablesEnum.xdrLocation.getFileName(), XdrLocTablesEnum.xdrLocation.getHourPath(mroXdrMergePath, dateStr, hourStr));
			registTypeInfo(typeInfo);

			TypeInfo typeInfo2 = new TypeInfo(XdrLocTablesEnum.xdruserinfo.getIndex(), XdrLocTablesEnum.xdruserinfo.getFileName(), XdrLocTablesEnum.xdruserinfo.getHourPath(mroXdrMergePath, dateStr, hourStr));
			registTypeInfo(typeInfo2);
			
			if(MainModel.GetInstance().getCompile().Assert(CompileMark.ChongQing))
			{
				TypeInfo typeInfo3 = new TypeInfo(XdrLocTablesEnum.xdrLocSpan.getIndex(), XdrLocTablesEnum.xdrLocSpan.getFileName(), XdrLocTablesEnum.xdrLocSpan.getHourPath(mroXdrMergePath, dateStr, hourStr));
				registTypeInfo(typeInfo3);
				
				TypeInfo typeInfo4 = new TypeInfo(XdrLocTablesEnum.xdrhirail.getIndex(), XdrLocTablesEnum.xdrhirail.getFileName(), XdrLocTablesEnum.xdrhirail.getHourPath(mroXdrMergePath, dateStr, hourStr));
				registTypeInfo(typeInfo4);
			}
		} 
		else 
		{
			for (XdrLocTablesEnum xdrLocTablesEnum : XdrLocTablesEnum.values()) 
			{
				if (XdrLocTablesEnum.xdrLocSpan == xdrLocTablesEnum && !MainModel.GetInstance().getCompile().Assert(CompileMark.ChongQing)) 
				{
					continue;
				} 
				else 
				{
					TypeInfo typeInfo = new TypeInfo(xdrLocTablesEnum.getIndex(), xdrLocTablesEnum.getFileName(), xdrLocTablesEnum.getHourPath(mroXdrMergePath, dateStr, hourStr));
					registTypeInfo(typeInfo);
				}
			}
			
		}
		
    }
	
	private void registTypeInfo(TypeInfo typeInfo)
	{
		if (!MainModel.GetInstance().getCompile().Assert(CompileMark.SaveToHive))
		{
			typeInfoMng_HDFS.registTypeInfo(typeInfo);
		}
		else
		{
			typeInfoMng_RDD.registTypeInfo(typeInfo);
		}
	}

	@Override
	protected int init_once_sub() throws Exception
	{
		//初始化基础配置	
		Configuration conf = new Configuration();
		MainModel.GetInstance().setConf(conf);

		try {
			mmeParseItem = MainModel.GetInstance().getDataAdapterConfig().getParseItem("S1-MME");
			mmeSplitMax = mmeParseItem.getSplitMax(mmeParseItem.resortColumNamePos());
			mmeAdapterReader = new DataAdapterReader(mmeParseItem);
			
			httpParseItem = MainModel.GetInstance().getDataAdapterConfig().getParseItem("S1-HTTP");
			httpSplitMax = httpParseItem.getSplitMax(httpParseItem.resortColumNamePos());
			httpAdapterReader = new DataAdapterReader(httpParseItem);
			
			resultOutputer = new ResultOutputer(dataOutputMng);
			xdrLocDeal = new XdrLocDeal(resultOutputer);
		}
		catch (Exception e)
		{
			LOGHelper.GetLogger().writeDetailLog(LogType.error,"xdr init_once_sub : mme: " + mmeSplitMax + "http: " + httpSplitMax, e);
		}
		
		// 打印状态日志
		LOGHelper.GetLogger().writeLog(LogType.info,"ltecell init count is : " + CellConfig.GetInstance().getLteCellInfoMap().size());
		
		return 0;
	}
	
	public int addData(int timeSpan,String value,int dataTypeMark)
	{
		List<List<String>> tenDataList;
		List<String> dataTypeList;
		if (!allDataMap.containsKey(timeSpan)) 
		{
			tenDataList = new ArrayList<>();
			for(int i=0;i<=DataMark_HTTP;i++)//初始化，避免越界
			{
				tenDataList.add(i,null);
			}
			dataTypeList = new ArrayList<>();
			dataTypeList.add(value);
			tenDataList.set(dataTypeMark,dataTypeList);
			allDataMap.put(timeSpan, tenDataList);
		}
		else if(allDataMap.get(timeSpan).get(dataTypeMark)== null)//有当前10分钟的数据，但没有此类型的数据
		{
			dataTypeList = new ArrayList<>();
			dataTypeList.add(value);
			allDataMap.get(timeSpan).set(dataTypeMark,dataTypeList);
		}
		else
		{
			allDataMap.get(timeSpan).get(dataTypeMark).add(value);
		}
		return 0;
	}

	public String logErr(Exception e)
	{
		StringBuffer sb = new StringBuffer();
		sb.delete(0, sb.length());
		StackTraceElement[] trace = e.getStackTrace();
		for (StackTraceElement stackTraceElement : trace)
		{
			sb.append("\tat " + stackTraceElement);
		}
		return sb.toString();
	}

	@Override
	//这里进来的是一个partition，包含多个imsi
	public Iterable<Tuple2<TypeInfo, Iterable<String>>> call(Iterator<Tuple2<Long, Tuple4<Iterable<String>, Iterable<String>, Iterable<String>, Iterable<String>>>> str)throws Exception {
		// TODO Auto-generated method stub
		// 初始化配置
		init_once();
		while(str.hasNext())
		{
			//一个imsi
			Tuple2<Long, Tuple4<Iterable<String>, Iterable<String>, Iterable<String>, Iterable<String>>> tp = str.next();
			long imsi = tp._1;
			Tuple4<Iterable<String>, Iterable<String>, Iterable<String>, Iterable<String>> tp4 = tp._2;
			xdrLocDeal.init(imsi);
			allDataMap = new HashMap<>();
			//location数据
			Iterator<String> it4 = tp4._4().iterator();
			int locIndex = 0;
			while(it4.hasNext())
			{
				try
				{
					if (locIndex ++ > 10000)
					{
						continue;
					}
					
					
					int timeSpan = 0;
					String locData = it4.next();
					String[] strs = locData.split("\\|" + "|" + "\t", -1);
//					LOGHelper.GetLogger().writeLog(LogType.info, "ottdata:" +strs.length+ "->" + locData);
					if(strs.length < 14)
					{
						continue;
					}
					if (strs[0].equals("URI") || strs[0].equals(""))
					{
						try
						{
							timeSpan = (int)(Long.parseLong(strs[2])/1000L) / TimeSpan * TimeSpan;
						}
						catch (Exception e)
						{
							LOGHelper.GetLogger().writeDetailLog(LogType.error, "error ottdata:" + locData, e);
						}
					}
					else if(strs[1].length() == 13)
					{
						timeSpan = (int)(Long.parseLong(strs[1])/1000L) / TimeSpan * TimeSpan;
					}
					else
					{
						timeSpan = (int)(Long.parseLong(strs[1])) / TimeSpan * TimeSpan;
					}
					addData(timeSpan, locData, DataMark_Location);
				}
				catch (Exception e)
				{
					LOGHelper.GetLogger().writeDetailLog(LogType.error, "DataMark_Location Error: ", e);
				}
			}
			
			Iterator<String> it3 = tp4._3().iterator();//前1小时最后十分钟xdr
			int xdrIndex = 0;
			while(it3.hasNext())
			{
				try
				{
					if (xdrIndex++ > 40000)
					{
						continue;
					}
					
					String lastXdrData = it3.next();
					String[] strs = lastXdrData.split("\t",5);
					int timeSpan = Integer.parseInt(strs[3]) / TimeSpan * TimeSpan;
					addData(timeSpan, lastXdrData, DataMark_XdrLocSpan);
				}
				catch (Exception e)
				{
					LOGHelper.GetLogger().writeDetailLog(LogType.error, "get lastXdrData Error: ", e);
				}
			}
			
			Iterator<String> it1 = tp4._1().iterator();
			int mmeIndex = 0;
			while(it1.hasNext())
			{
				try 
				{
					if (mmeIndex++ > 40000)
					{
						continue;
					}
					String mmeData = it1.next();
					String[] strs = mmeData.split(mmeParseItem.getSplitMark(),mmeSplitMax+2);
					mmeAdapterReader.readData(strs);
					Date d_beginTime = mmeAdapterReader.GetDateValue("Procedure_Start_Time", new Date(1970, 1, 1));
					int timeSpan = (int)(d_beginTime.getTime() / 1000L) / TimeSpan * TimeSpan;
					addData(timeSpan, mmeData, DataMark_MME);
				}
				catch (Exception e)
				{
					LOGHelper.GetLogger().writeDetailLog(LogType.error, "DataMark_MME Error: ", e);
				}
				
			}

			Iterator<String> it2 = tp4._2().iterator();
			while(it2.hasNext())
			{
				try 
				{
					String httpData = it2.next();
					String[] strs = httpData.split(httpParseItem.getSplitMark(),httpSplitMax+2);
					httpAdapterReader.readData(strs);
					Date d_beginTime = httpAdapterReader.GetDateValue("Procedure_Start_Time", new Date(1970, 1, 1));
					int timeSpan = (int)(d_beginTime.getTime() / 1000L) / TimeSpan * TimeSpan;
					addData(timeSpan, httpData, DataMark_HTTP);
				}
				catch (Exception e)
				{
					LOGHelper.GetLogger().writeDetailLog(LogType.error, "DataMark_HTTP Error: ", e);
				}
				
			}
			
			try
			{
				List<Integer> timeList = new ArrayList<>(allDataMap.keySet());
				Collections.sort(timeList,new Comparator<Integer>()
				{
					@Override
					public int compare(Integer o1, Integer o2) {
						return o1 - o2;
					}
				});	
				
				for(Integer timeSpan : timeList)
				{
					List<List<String>> tenDataList = allDataMap.get(timeSpan);
					if (tenDataList.get(DataMark_Location) != null)
					{
						for(String locData : tenDataList.get(DataMark_Location))
						{
							xdrLocDeal.pushData(XdrLocDeal.DataType_LOCATION, locData);
						}
					}
					
					if (tenDataList.get(DataMark_XdrLocSpan) != null)
					{
						for (String lastXdrData : tenDataList.get(DataMark_XdrLocSpan))
						{
							xdrLocDeal.pushData(XdrLocDeal.DataType_XDR_LOC_SPAN, lastXdrData);
						}
					}
					
					if (tenDataList.get(DataMark_MME) != null)
					{
						for (String mmeData : tenDataList.get(DataMark_MME))
						{
							xdrLocDeal.pushData(XdrLocDeal.DataType_XDR_MME, mmeData);
						}
					}
					
					if (tenDataList.get(DataMark_HTTP) != null)
					{
						for (String httpData : tenDataList.get(DataMark_HTTP))
						{
							xdrLocDeal.pushData(XdrLocDeal.DataType_XDR_HTTP, httpData);
						}
					}
					allDataMap.get(timeSpan).clear();//当前10分钟数据清空
					xdrLocDeal.statData();
					xdrLocDeal.outData();
				}
				allDataMap.clear();
			}
			catch (Exception e)
			{
				LOGHelper.GetLogger().writeDetailLog(LogType.error, "pushData Error: ", e);
			}
		}
		xdrLocDeal.outAllData();
		
		List<Tuple2<TypeInfo, Iterable<String>>> resultRdd = typeResult.GetRdds();
		dataOutputMng.clear();
//		clear(true);
		return resultRdd;
	}
}

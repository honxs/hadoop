package cn.mastercom.bigdata.conf.config;

import cn.mastercom.bigdata.mroxdrmerge.MainModel;
import cn.mastercom.bigdata.util.*;
import cn.mastercom.bigdata.util.hadoop.hdfs.FileReader;
import org.apache.hadoop.conf.Configuration;
import java.util.*;

public class PropertyConfig {
    /**
     *加载物业点配置
     */

    private final static int gridSize = 40000; //栅格大小 400米
    private static PropertyConfig instance;
    private Map<DPoint, Set<PropertyInfo>> gridMap;

    public static PropertyConfig GetInstance()
    {
        if (instance == null)
        {
            instance = new PropertyConfig();
        }
        return instance;
    }

    public PropertyConfig()
    {
        gridMap = new HashMap<>();
    }

    public boolean loadProperty(Configuration conf) {
        String filePath = MainModel.GetInstance().getAppConfig().getPropertyConfigPath();
        return loadProperty(conf, filePath);
    }

    private boolean loadProperty(Configuration conf, String filePath)
    {
        try{
            FileReader.readFile(conf, filePath, new FileReader.LineHandler() {
                @Override
                public void handle(String line) {
                    String[] values;
                    try {
                        if (line.trim().length()==0)
                        {
                            return;
                        }
                        values = line.split("\t", -1);
                        if (values.length < 17){
                        	return;
                        }
                        PropertyInfo propertyInfo = new PropertyInfo(values);
                        setGridMap(propertyInfo, gridMap);
                    }
                    catch (Exception e) {
                    }
                }
            });
        }catch (Exception e){
        }
        return true;
    }

    public PropertyInfo getAreaID(int longitude, int latitude)
    {
        PropertyInfo tempPropertyInfo = null;
        Set<PropertyInfo> propertyInfoSet = findRoadSet(longitude, latitude, gridMap);
        double lot = longitude * 1.0 / 10000000;
        double lat = latitude * 1.0 / 10000000;
        if (propertyInfoSet!=null)
        {
            for (PropertyInfo propertyInfo : propertyInfoSet)
            {
                List<DPoint> vertexes = propertyInfo.polygonPoints;
                //点本身在多边形内
                if (PolygonUtil.isDPointInOrOnPolygon(lot, lat, vertexes))
                {
                	tempPropertyInfo = propertyInfo;
                    break;
                }
            }
        }
        return tempPropertyInfo;
    }

    // 筛选配置
    private static Set<PropertyInfo> findRoadSet(int longitude, int latitude,
                                         Map<DPoint, Set<PropertyInfo>> gridMap) {

        int lngLeft = longitude / gridSize * gridSize;
        int latLower = latitude / gridSize * gridSize;

        Set<PropertyInfo> roadSet = new HashSet<>();
        DPoint DPoint = new DPoint(lngLeft, latLower);
        Set<PropertyInfo> set = gridMap.get(DPoint);
        if (set != null) {
            roadSet.addAll(set);
        }
        return roadSet;
    }

    // 设置栅格Map
    private static void setGridMap(PropertyInfo propertyInfo, Map<DPoint, Set<PropertyInfo>> gridMap) {

        // 栅格左上角和右下角边界的经纬度
        int tlLot = propertyInfo.tlLongitude / gridSize * gridSize;
        int tlLat = propertyInfo.tlLatitude / gridSize * gridSize;
        int brLot = propertyInfo.brLongitude / gridSize * gridSize;
        int brLat = propertyInfo.brLatitude / gridSize * gridSize;

        for (int i = tlLot; i <= brLot; i += gridSize) {
            for (int j = brLat; j <= tlLat; j += gridSize) {
                DPoint subLeftLowerGrid = new DPoint(i, j);
                Set<PropertyInfo> roadSet = gridMap.get(subLeftLowerGrid);
                if (roadSet == null) {
                    Set<PropertyInfo> set = new HashSet<>();
                    set.add(propertyInfo);
                    gridMap.put(subLeftLowerGrid, set);
                } else {
                    roadSet.add(propertyInfo);
                    gridMap.put(subLeftLowerGrid, roadSet);
                }
            }
        }
    }
}
